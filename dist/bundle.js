(()=>{"use strict";var n={257:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([n.id,'* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nselect {\n  width: 100%;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  font-family: sans-serif;\n  font-size: 16px;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n/* GNB ********************************************/\n.gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n\n/* 음식점 목록 *****************************************/\n\n/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n\n/* 음식점 목록 */\n.restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n\n.restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.category-icon {\n  width: 36px;\n  height: 36px;\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n\n/* 음식점 추가 모달 *****************************************/\n.modal {\n  display: none;\n}\n\n.modal--open {\n  display: block;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n}\n\n.modal-title {\n  margin-bottom: 36px;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: "*";\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name="name"],\ninput[name="link"] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n\n.no-restaurant-item-message {\n  position: absolute;\n  width: fit-content;\n\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  color: var(--grey-300);\n}\n',"",{version:3,sources:["webpack://./templates/style.css"],names:[],mappings:"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",sourcesContent:['* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nselect {\n  width: 100%;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  font-family: sans-serif;\n  font-size: 16px;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n/* GNB ********************************************/\n.gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n\n/* 음식점 목록 *****************************************/\n\n/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n\n/* 음식점 목록 */\n.restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n\n.restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.category-icon {\n  width: 36px;\n  height: 36px;\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n\n/* 음식점 추가 모달 *****************************************/\n.modal {\n  display: none;\n}\n\n.modal--open {\n  display: block;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n}\n\n.modal-title {\n  margin-bottom: 36px;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: "*";\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name="name"],\ninput[name="link"] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n\n.no-restaurant-item-message {\n  position: absolute;\n  width: fit-content;\n\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  color: var(--grey-300);\n}\n'],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(o[A]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var A=n[s],l=r.base?A[0]+r.base:A[0],c=i[l]||0,d="".concat(l," ").concat(c);i[l]=c+1;var p=t(d),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=a(u,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:m,references:1})}o.push(d)}return o}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=t(i[o]);e[s].references--}for(var A=r(n,a),l=0;l<i.length;l++){var c=t(i[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),a=t.n(r),i=t(569),o=t.n(i),s=t(565),A=t.n(s),l=t(216),c=t.n(l),d=t(589),p=t.n(d),u=t(257),m={};m.styleTagTransform=p(),m.setAttributes=A(),m.insert=o().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=c(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;class g extends HTMLElement{connectedCallback(){this.render()}render(){this.innerHTML=this.getTemplate()}}class h extends g{connectedCallback(){this.render(),this.setEvent()}}const f=n=>document.querySelector(n),E="categoryFilterChange",b="sortFilterChange",x="restaurant-form-modal-action",C="open",B="close",y="restaurantFormSubmit";t.p,t.p,t.p,t.p,t.p,t.p,t.p;const v={korean:"./category-korean.png",chinese:"./category-chinese.png",japanese:"./category-japanese.png",western:"./category-western.png",asian:"./category-asian.png",etc:"./category-etc.png"};customElements.define("category-icon",class extends g{getTemplate(){const n=this.getAttribute("category");if(!n||!this.isCategory(n))throw new Error("유효하지 않은 카테고리입니다.");return`\n      <div class="restaurant__category">\n        <img class="category-icon" src=${this.convertCategoryToImage(n)} alt=${n}>\n      </div>\n    `}isCategory(n){return Object.keys(v).includes(n)}convertCategoryToImage(n){return v[n]}static get observedAttributes(){return["category"]}});const w=n=>Object.entries(n).map((([n,e])=>({value:n,label:e}))),k={korean:"korean",chinese:"chinese",japanese:"japanese",western:"western",asian:"asian",etc:"etc"},T={[k.korean]:"한식",[k.chinese]:"중식",[k.japanese]:"일식",[k.western]:"양식",[k.asian]:"아시안",[k.etc]:"기타"},j={...k,all:"all"},_={[j.all]:"전체",[j.korean]:"한식",[j.chinese]:"중식",[j.japanese]:"일식",[j.western]:"양식",[j.asian]:"아시안",[j.etc]:"기타"},S="name",$="timeToReach",Y={[S]:"이름순",[$]:"거리순"},O=1,M=20,R=1,z=20,W=1,D=60,F=500,L=500,q=(n,e,t)=>{if(t<n||t>e)throw new Error(`값이 ${n}이상 ${e}이하여야 합니다.`)},I=(n,e)=>{if(e>n)throw new Error(`값이 ${n}이하여야 합니다.`)};var N,Z,P,J,U,X,H,Q,G,V,K,nn,en=function(n,e,t,r){if("a"===t&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?n!==e||!r:!e.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===t?r:"a"===t?r.call(n):r?r.value:e.get(n)},tn=function(n,e,t,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?n!==e||!a:!e.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,t):a?a.value=t:e.set(n,t),t};Z=new WeakMap,P=new WeakMap,J=new WeakMap,U=new WeakMap,X=new WeakMap,N=new WeakSet,H=function({name:n,category:e,timeToReach:t,description:r,link:a}){en(this,N,"m",Q).call(this,n),en(this,N,"m",G).call(this,e),en(this,N,"m",V).call(this,t),en(this,N,"m",K).call(this,r),en(this,N,"m",nn).call(this,a)},Q=function(n){q(O,M,n.length)},G=function(n){if(q(R,z,n.length),!Object.keys(k).includes(n))throw new Error("Invalid category")},V=function(n){q(W,D,n)},K=function(n){I(F,n.length)},nn=function(n){I(L,n.length)};const rn=class{constructor({name:n,category:e,timeToReach:t,description:r,link:a}){N.add(this),Z.set(this,void 0),P.set(this,void 0),J.set(this,void 0),U.set(this,void 0),X.set(this,void 0),en(this,N,"m",H).call(this,{name:n,category:e,timeToReach:t,description:r,link:a}),tn(this,Z,n,"f"),tn(this,U,e,"f"),tn(this,P,t,"f"),tn(this,J,r,"f"),tn(this,X,a,"f")}getName(){return en(this,Z,"f")}getInfo(){return{name:en(this,Z,"f"),category:en(this,U,"f"),timeToReach:en(this,P,"f"),description:en(this,J,"f"),link:en(this,X,"f")}}};var an,on,sn,An=function(n,e,t,r){if("a"===t&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?n!==e||!r:!e.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===t?r:"a"===t?r.call(n):r?r.value:e.get(n)},ln=function(n,e,t,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?n!==e||!a:!e.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,t):a?a.value=t:e.set(n,t),t};on=new WeakMap,an=new WeakSet,sn=function(n){const e=n.map((n=>n.getName()));if(new Set(e).size!==e.length)throw new Error("중복된 식당 이름이 있습니다.")};const cn=class{constructor(n){an.add(this),on.set(this,[]),An(this,an,"m",sn).call(this,n),ln(this,on,n,"f")}add(n){An(this,an,"m",sn).call(this,[...An(this,on,"f"),n]),ln(this,on,[...An(this,on,"f"),n],"f")}getDetails(){return An(this,on,"f").map((n=>n.getInfo()))}},dn={getParsedItem(n){const e=localStorage.getItem(n);return e?JSON.parse(e):null},setItem(n,e){localStorage.setItem(n,JSON.stringify(e))},reset(){localStorage.clear()}},pn={getRestaurants(){const n=dn.getParsedItem("restaurants");if(!n)return new cn([]);try{const e=n.map((n=>new rn(n)));return new cn(e)}catch{return dn.reset(),alert("데이터 건들지 마세요!"),this.getRestaurants()}},setRestaurnats(n){dn.setItem("restaurants",n.getDetails())}},un=pn;customElements.define("restaurant-item",class extends g{getTemplate(){const n=this.getAttribute("category"),e=this.getAttribute("name"),t=this.getAttribute("timeToReach"),r=this.getAttribute("description");return this.getAttribute("link"),`\n      <li class="restaurant">\n        <category-icon category=${n}></category-icon>\n        <div class="restaurant__info">\n          <h3 class="restaurant__name text-subtitle">${e}</h3>\n          <span class="restaurant__distance text-body">캠퍼스부터 ${t}분 내</span>\n          <p class="restaurant__description text-body">${r}</p>\n        </div>\n      </li>\n    `}static get observedAttributes(){return["category","name","timeToReach","description"]}}),customElements.define("filter-bar",class extends g{getTemplate(){return`\n    <section class="restaurant-filter-container">\n      <select-box\n        select-id="category-select"\n        class-name="restaurant-filter" \n        options=${this.generateCategoryOptions()}\n        event-name=${E}\n      ></select-box>\n\n      <select-box\n        select-id="sorting-filter"\n        class-name="restaurant-filter"\n        options=${this.generateSortingOptions()}\n        event-name=${b}\n      ></select-box>\n    </section>\n`}generateCategoryOptions(){return this.generateOptions(_)}generateSortingOptions(){return this.generateOptions(Y)}generateOptions(n){const e=w(n);return JSON.stringify(e)}}),customElements.define("form-item",class extends g{getTemplate(){const n=this.getAttribute("label-for"),e=this.getAttribute("title"),t=this.getAttribute("required"),r=this.getAttribute("help-text");return`\n      <div class="form-item${t?" form-item--required":""}">\n        <label for="${n} text-caption">${e}</label>\n        ${this.innerHTML}\n        ${r?`<span class="help-text text-caption">${r}</span>`:""}\n      </div>\n    `}static get observedAttributes(){return["title","required","help-text","label-for"]}});const mn=[{value:"",label:"선택해&nbsp;주세요"},{value:"5",label:"5분&nbsp;내"},{value:"10",label:"10분&nbsp;내"},{value:"15",label:"15분&nbsp;내"},{value:"20",label:"20분&nbsp;내"},{value:"30",label:"30분&nbsp;내"}];customElements.define("restaurant-header",class extends h{getTemplate(){return'\n    <header class="gnb">\n      <h1 class="gnb__title text-title">점심 뭐 먹지</h1>\n      <button id="add-button" type="button" class="gnb__button" aria-label="음식점 추가">\n        <img src="./add-button.png" alt="음식점 추가">\n      </button>\n    </header>\n    '}setEvent(){f("#add-button")?.addEventListener("click",this.handleAddButtonClick)}handleAddButtonClick(){this.dispatchEvent(new CustomEvent(x,{bubbles:!0,detail:{action:C}}))}}),customElements.define("restaruant-list",class extends h{constructor(n=un.getRestaurants(),e=j.all,t=S){super(),this.restaurants=n,this.categoryFilter=e,this.sortFilter=t}getTemplate(){const n=this.restaurants.getDetails(),e=this.filterByCategory(n,this.categoryFilter);return`\n      <section class="restaurant-list-container">\n        <ul class="restaurant-list">\n          ${this.sort(e,this.sortFilter).map((({name:n,category:e,timeToReach:t,description:r,link:a})=>`\n            <restaurant-item name="${n}" category="${e}" timeToReach="${t}" description="${r}" link="${a}">\n            </restaurant-item>`)).join("")||"<p class='no-restaurant-item-message'>등록된 식당이 없습니다.<br/> 식당을 추가해주세요 👨🏻‍🍳</p>"}\n        </ul>\n      </section>\n    `}setEvent(){document.addEventListener(E,(n=>this.handleCategoryFilterChange(n))),document.addEventListener(b,(n=>this.handleSortFilterChange(n))),document.addEventListener(y,(n=>{this.handleRestaurantFormSubmit(n)}))}handleCategoryFilterChange(n){const{value:e}=n?.detail;this.categoryFilter=e,this.render()}handleSortFilterChange(n){const{value:e}=n?.detail;this.sortFilter=e,this.render()}handleRestaurantFormSubmit(n){const{payload:e,cleanUp:t}=n?.detail;try{const n=new rn(e);this.restaurants.add(n),un.setRestaurnats(this.restaurants)}catch(n){return alert(n.message)}t(),this.render()}filterByCategory(n,e){return Object.keys(j).includes(e)?e===j.all?n:n.filter((({category:n})=>n===e)):n}sort(n,e){return e===S?n.sort(((n,e)=>n.name.localeCompare(e.name))):e===$?n.sort(((n,e)=>n.timeToReach-e.timeToReach)):n}static get observedAttributes(){return["restaurants"]}}),customElements.define("select-box",class extends h{getTemplate(){const n=this.getAttribute("options");return`\n      <select id=${this.getAttribute("select-id")||""} class=${this.getAttribute("class-name")||""} name=${this.getAttribute("name")||""} ${this.getAttribute("required")?"required":""}>\n        ${(n?JSON.parse(n):[]).map((({value:n,label:e})=>`<option value=${n}>${e}</option>`))}\n      </select>\n    `}handleSelectChange(n,e){const t=n.target.value;this.dispatchEvent(new CustomEvent(e,{detail:{value:t},bubbles:!0}))}setEvent(){const n=this.getAttribute("event-name")||"",e=this.getAttribute("select-id")||"";f(`#${e}`)?.addEventListener("change",(e=>this.handleSelectChange(e,n)))}static get observedAttributes(){return["options","event-name","select-id","class-name","name","required"]}}),customElements.define("modal-box",class extends h{getTemplate(){const n=this.getAttribute("isOpen");return`\n      <div id=${this.getAttribute("modal-id")} class="modal ${n?"modal--open":""}">\n        <div class="modal-backdrop"></div>\n        <div class="modal-container">\n          ${this.innerHTML}\n        </div>\n      </div>\n    `}setEvent(){const n=this.getAttribute("modal-id")||"";document.addEventListener(x,(e=>this.handleFormModalAction(e,n))),f(`#${n} > .modal-backdrop`)?.addEventListener("click",(()=>{this.closeModal(n)}))}handleFormModalAction(n,e){const{action:t}=n.detail;t===C&&this.openModal(e),t===B&&this.closeModal(e)}openModal(n){f(`#${n}`)?.classList.add("modal--open")}closeModal(n){f(`#${n}`)?.classList.remove("modal--open")}static get observedAttributes(){return["isOpen","modal-id"]}}),customElements.define("restaurant-form",class extends h{getTemplate(){return`\n    <h2 class="modal-title text-title">새로운 음식점</h2>\n    <form>\n      <form-item title="카테고리" required="true" label-for="category">\n        <select-box\n          select-id="category"\n          name="category"\n          options=${this.generateCategoryOptions()}\n          required="true"\n        >\n        </select-box>\n      </form-item>\n\n      <form-item title="이름" required="true" id="name">\n        <input type="text" id="name" name="name" required>\n      </form-item>\n\n      <form-item title="거리(도보 이동 시간)" required="true" label-for="time-to-reach">\n        <select-box\n          select-id="time-to-reach"\n          name="time-to-reach"\n          options=${JSON.stringify(mn)}\n          required="true"\n        >\n        </select-box>\n      </form-item>\n\n      <form-item title="설명" label-for="description" help-text="메뉴 등 추가 정보를 입력해 주세요."}>\n        <textarea name="description" id="description" cols="30" rows="5"></textarea>\n      </form-item>\n\n      <form-item title="참고 링크" label-for="link" help-text="매장 정보를 확인할 수 있는 링크를 입력해 주세요.">\n        <input type="text" name="link" id="link" />\n      </form-item>\n\n      <div class="button-container">\n        <button id="close-button" type="button" class="button button--secondary text-caption">취소하기</button>\n        <button class="button button--primary text-caption">추가하기</button>\n      </div>\n    </form>\n`}setEvent(){this.addEventListener("submit",this.handleSubmit),f("#close-button")?.addEventListener("click",this.handleCloseButtonClick)}handleCloseButtonClick(){this.dispatchEvent(new CustomEvent(x,{bubbles:!0,detail:{action:B}}))}handleSubmit(n){n.preventDefault();const e=n.target,t=new FormData(e),r=Object.fromEntries(t),a=f("#category").value,i=f("#time-to-reach").value,o={...r,category:a,timeToReach:Number(i)};this.dispatchEvent(new CustomEvent(y,{bubbles:!0,detail:{payload:o,cleanUp:()=>{n.target?.reset(),this.dispatchEvent(new CustomEvent(x,{bubbles:!0,detail:{action:B}}))}}}))}generateCategoryOptions(){return this.generateOptions(T)}generateOptions(n){const e=w(n);return JSON.stringify(e)}}),customElements.define("lunch-app",class extends g{getTemplate(){return'\n        <restaurant-header></restaurant-header> \n        <main>\n          <filter-bar></filter-bar>\n          <restaruant-list></restaruant-list>\n          <modal-box modal-id="retaurant-form-modal">\n          <restaurant-form></restaurant-form>\n          </modal-box>\n        </main>\n      '}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y0FBdUJ0QixFQUNsQ0ssY0FDSSxNQUFPLCtTQVVYLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9zdHlsZS5jc3M/MmFmZiIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9hYnN0cmFjdC9CYXNlQ29tcG9uZW50LnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2Fic3RyYWN0L0V2ZW50Q29tcG9uZW50LnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3V0aWxzL3NlbGVjdG9yLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbnN0YW50cy9ldmVudC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9hZGQtYnV0dG9uLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9jYXRlZ29yeS1rb3JlYW4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL2NhdGVnb3J5LWNoaW5lc2UucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL2NhdGVnb3J5LXdlc3Rlcm4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vdGVtcGxhdGVzL2NhdGVnb3J5LWphcGFuZXNlLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3RlbXBsYXRlcy9jYXRlZ29yeS1hc2lhbi5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi90ZW1wbGF0ZXMvY2F0ZWdvcnktZXRjLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0NhdGVnb3J5SWNvbi50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3V0aWxzL2NvbnZlcnRPYmplY3RUb09wdGlvbnMudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29uc3RhbnRzL2NhdGVnb3J5LnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbnN0YW50cy9maWx0ZXIudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29uc3RhbnRzL3Jlc3RhdXJhbnQudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvdXRpbHMvdmFsaWRhdG9yLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2RvbWFpbi9SZXN0YXVyYW50LnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2RvbWFpbi9SZXN0YXVyYW50cy50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9zdG9yZS9sb2NhbFN0b3JhZ2VTdG9yZS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9zdG9yZS9yZXN0YXVyYW50U3RvcmUudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0ZpbHRlckJhci50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRGb3JtLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0Zvcm1JdGVtLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL0x1bmNoQXBwLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEhlYWRlci50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9TZWxlY3QudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9jb21tb24vTW9kYWwudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5zZWxlY3Qge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbnVsLFxcbmxpIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmh0bWwsXFxuYm9keSB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLyogQ29sb3JzICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbjpyb290IHtcXG4gIC0tcHJpbWFyeS1jb2xvcjogI2VjNGEwYTtcXG4gIC0tbGlnaHRlbi1jb2xvcjogI2Y2YTg4YTtcXG4gIC0tZ3JleS0xMDA6ICNmZmZmZmY7XFxuICAtLWdyZXktMjAwOiAjZDBkNWRkO1xcbiAgLS1ncmV5LTMwMDogIzY2NzA4NTtcXG4gIC0tZ3JleS00MDA6ICMzNDQwNTQ7XFxuICAtLWdyZXktNTAwOiAjMDAwMDAwO1xcbn1cXG5cXG4vKiBUeXBvZ3JhcGh5ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLnRleHQtdGl0bGUge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGV4dC1zdWJ0aXRsZSB7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi50ZXh0LWJvZHkge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4udGV4dC1jYXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLyogR05CICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5nbmIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDY0cHg7XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLmduYl9fdGl0bGUge1xcbiAgY29sb3I6ICNmY2ZjZmQ7XFxufVxcblxcbi5nbmJfX2J1dHRvbiB7XFxuICBoZWlnaHQ6IDQwcHg7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGZvbnQtc2l6ZTogMjRweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmduYl9fYnV0dG9uIGltZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcXG59XFxuXFxuLyog7J2M7Iud7KCQIOuqqeuhnSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG5cXG4vKiDsubTthYzqs6Drpqwv7KCV66CsIO2VhO2EsCAqL1xcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbi10b3A6IDI0cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIgc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG4gIG1pbi13aWR0aDogMTI1cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDBkNWRkO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlciB7XFxuICBwYWRkaW5nOiA4cHg7XFxufVxcblxcbi8qIOydjOyLneygkCDrqqnroZ0gKi9cXG4ucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbjogMTZweCAwO1xcbn1cXG5cXG4ucmVzdGF1cmFudCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuXFxuICBwYWRkaW5nOiAxNnB4IDhweDtcXG5cXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllYWVkO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fY2F0ZWdvcnkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiA2NHB4O1xcbiAgaGVpZ2h0OiA2NHB4O1xcbiAgbWluLXdpZHRoOiA2NHB4O1xcbiAgbWluLWhlaWdodDogNjRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxpZ2h0ZW4tY29sb3IpO1xcbn1cXG5cXG4uY2F0ZWdvcnktaWNvbiB7XFxuICB3aWR0aDogMzZweDtcXG4gIGhlaWdodDogMzZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2luZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5yZXN0YXVyYW50X19uYW1lIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rpc3RhbmNlIHtcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcblxcbiAgcGFkZGluZy10b3A6IDhweDtcXG5cXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIC13ZWJraXQtbGluZS1jbGFtcDogMjtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxufVxcblxcbi8qIOydjOyLneygkCDstpTqsIAg66qo64usICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5tb2RhbCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubW9kYWwtLW9wZW4ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5tb2RhbC1iYWNrZHJvcCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMzUpO1xcbn1cXG5cXG4ubW9kYWwtY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGJvdHRvbTogMDtcXG4gIHdpZHRoOiAxMDAlO1xcblxcbiAgcGFkZGluZzogMzJweCAxNnB4O1xcblxcbiAgYm9yZGVyLXJhZGl1czogOHB4IDhweCAwcHggMHB4O1xcbiAgYmFja2dyb3VuZDogdmFyKC0tZ3JleS0xMDApO1xcbn1cXG5cXG4ubW9kYWwtdGl0bGUge1xcbiAgbWFyZ2luLWJvdHRvbTogMzZweDtcXG59XFxuXFxuLmZvcm0taXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIG1hcmdpbi1ib3R0b206IDM2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gbGFiZWwge1xcbiAgY29sb3I6IHZhcigtLWdyZXktNDAwKTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLmZvcm0taXRlbS0tcmVxdWlyZWQgbGFiZWw6OmFmdGVyIHtcXG4gIHBhZGRpbmctbGVmdDogNHB4O1xcblxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbiAgY29udGVudDogXFxcIipcXFwiO1xcbn1cXG5cXG4uZm9ybS1pdGVtIC5oZWxwLXRleHQge1xcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuLmZvcm0taXRlbSBpbnB1dCxcXG4uZm9ybS1pdGVtIHRleHRhcmVhLFxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIG1hcmdpbjogNnB4IDA7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEge1xcbiAgcmVzaXplOiBub25lO1xcbn1cXG5cXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuXFxuICBwYWRkaW5nOiA4cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG5pbnB1dFtuYW1lPVxcXCJuYW1lXFxcIl0sXFxuaW5wdXRbbmFtZT1cXFwibGlua1xcXCJdIHtcXG4gIGhlaWdodDogNDRweDtcXG59XFxuXFxuLmJ1dHRvbi1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5idXR0b246bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxufVxcblxcbi5idXR0b24tLXNlY29uZGFyeSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTMwMCk7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbi5idXR0b24tLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0xMDApO1xcbn1cXG5cXG4ubm8tcmVzdGF1cmFudC1pdGVtLW1lc3NhZ2Uge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xcblxcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3RlbXBsYXRlcy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxVQUFVO0VBQ1YsU0FBUztFQUNULHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTs7RUFFRSxnQkFBZ0I7QUFDbEI7O0FBRUE7O0VBRUUsdUJBQXVCO0VBQ3ZCLGVBQWU7QUFDakI7O0FBRUEsbURBQW1EO0FBQ25EO0VBQ0Usd0JBQXdCO0VBQ3hCLHdCQUF3QjtFQUN4QixtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsbUJBQW1CO0FBQ3JCOztBQUVBLG1EQUFtRDtBQUNuRDtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBLG1EQUFtRDtBQUNuRDtFQUNFLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsbUJBQW1CO0VBQ25CLFlBQVk7O0VBRVosZUFBZTs7RUFFZixzQ0FBc0M7QUFDeEM7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsWUFBWTs7RUFFWixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLHVCQUF1Qjs7RUFFdkIsZUFBZTtFQUNmLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsV0FBVztFQUNYLFlBQVk7RUFDWixtQkFBbUI7QUFDckI7O0FBRUEsbURBQW1EOztBQUVuRCxlQUFlO0FBQ2Y7RUFDRSxhQUFhO0VBQ2IsOEJBQThCOztFQUU5QixlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGdCQUFnQjs7RUFFaEIseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQix1QkFBdUI7O0VBRXZCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUEsV0FBVztBQUNYO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjs7RUFFdEIsZUFBZTtFQUNmLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCOztFQUV2QixpQkFBaUI7O0VBRWpCLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCxZQUFZO0VBQ1osZUFBZTtFQUNmLGdCQUFnQjs7RUFFaEIsa0JBQWtCOztFQUVsQixrQkFBa0I7RUFDbEIsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0Usb0JBQW9COztFQUVwQixnQkFBZ0I7O0VBRWhCLGdCQUFnQjtFQUNoQix1QkFBdUI7RUFDdkIscUJBQXFCO0VBQ3JCLDRCQUE0QjtBQUM5Qjs7QUFFQSxzREFBc0Q7QUFDdEQ7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLE1BQU07RUFDTixRQUFRO0VBQ1IsU0FBUztFQUNULE9BQU87O0VBRVAsK0JBQStCO0FBQ2pDOztBQUVBO0VBQ0UsZUFBZTtFQUNmLFNBQVM7RUFDVCxXQUFXOztFQUVYLGtCQUFrQjs7RUFFbEIsOEJBQThCO0VBQzlCLDJCQUEyQjtBQUM3Qjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7O0VBRXRCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsaUJBQWlCOztFQUVqQiwyQkFBMkI7RUFDM0IsWUFBWTtBQUNkOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBOzs7RUFHRSxZQUFZO0VBQ1osYUFBYTs7RUFFYixpQ0FBaUM7RUFDakMsa0JBQWtCOztFQUVsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsWUFBWTs7RUFFWixZQUFZOztFQUVaLGlDQUFpQztFQUNqQyxrQkFBa0I7O0VBRWxCLHNCQUFzQjtBQUN4Qjs7QUFFQTs7RUFFRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTs7RUFFWixrQkFBa0I7O0VBRWxCLFlBQVk7RUFDWixrQkFBa0I7O0VBRWxCLGdCQUFnQjtFQUNoQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlDQUFpQztFQUNqQyx1QkFBdUI7O0VBRXZCLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGdDQUFnQzs7RUFFaEMsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGtCQUFrQjs7RUFFbEIsUUFBUTtFQUNSLFNBQVM7RUFDVCxnQ0FBZ0M7O0VBRWhDLHNCQUFzQjtBQUN4QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5zZWxlY3Qge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbnVsLFxcbmxpIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmh0bWwsXFxuYm9keSB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLyogQ29sb3JzICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbjpyb290IHtcXG4gIC0tcHJpbWFyeS1jb2xvcjogI2VjNGEwYTtcXG4gIC0tbGlnaHRlbi1jb2xvcjogI2Y2YTg4YTtcXG4gIC0tZ3JleS0xMDA6ICNmZmZmZmY7XFxuICAtLWdyZXktMjAwOiAjZDBkNWRkO1xcbiAgLS1ncmV5LTMwMDogIzY2NzA4NTtcXG4gIC0tZ3JleS00MDA6ICMzNDQwNTQ7XFxuICAtLWdyZXktNTAwOiAjMDAwMDAwO1xcbn1cXG5cXG4vKiBUeXBvZ3JhcGh5ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLnRleHQtdGl0bGUge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGV4dC1zdWJ0aXRsZSB7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi50ZXh0LWJvZHkge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4udGV4dC1jYXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLyogR05CICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5nbmIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDY0cHg7XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLmduYl9fdGl0bGUge1xcbiAgY29sb3I6ICNmY2ZjZmQ7XFxufVxcblxcbi5nbmJfX2J1dHRvbiB7XFxuICBoZWlnaHQ6IDQwcHg7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGZvbnQtc2l6ZTogMjRweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmduYl9fYnV0dG9uIGltZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcXG59XFxuXFxuLyog7J2M7Iud7KCQIOuqqeuhnSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG5cXG4vKiDsubTthYzqs6Drpqwv7KCV66CsIO2VhO2EsCAqL1xcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbi10b3A6IDI0cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIgc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG4gIG1pbi13aWR0aDogMTI1cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDBkNWRkO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlciB7XFxuICBwYWRkaW5nOiA4cHg7XFxufVxcblxcbi8qIOydjOyLneygkCDrqqnroZ0gKi9cXG4ucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbjogMTZweCAwO1xcbn1cXG5cXG4ucmVzdGF1cmFudCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuXFxuICBwYWRkaW5nOiAxNnB4IDhweDtcXG5cXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllYWVkO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fY2F0ZWdvcnkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiA2NHB4O1xcbiAgaGVpZ2h0OiA2NHB4O1xcbiAgbWluLXdpZHRoOiA2NHB4O1xcbiAgbWluLWhlaWdodDogNjRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxpZ2h0ZW4tY29sb3IpO1xcbn1cXG5cXG4uY2F0ZWdvcnktaWNvbiB7XFxuICB3aWR0aDogMzZweDtcXG4gIGhlaWdodDogMzZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2luZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5yZXN0YXVyYW50X19uYW1lIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rpc3RhbmNlIHtcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcblxcbiAgcGFkZGluZy10b3A6IDhweDtcXG5cXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIC13ZWJraXQtbGluZS1jbGFtcDogMjtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxufVxcblxcbi8qIOydjOyLneygkCDstpTqsIAg66qo64usICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5tb2RhbCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubW9kYWwtLW9wZW4ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5tb2RhbC1iYWNrZHJvcCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMzUpO1xcbn1cXG5cXG4ubW9kYWwtY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGJvdHRvbTogMDtcXG4gIHdpZHRoOiAxMDAlO1xcblxcbiAgcGFkZGluZzogMzJweCAxNnB4O1xcblxcbiAgYm9yZGVyLXJhZGl1czogOHB4IDhweCAwcHggMHB4O1xcbiAgYmFja2dyb3VuZDogdmFyKC0tZ3JleS0xMDApO1xcbn1cXG5cXG4ubW9kYWwtdGl0bGUge1xcbiAgbWFyZ2luLWJvdHRvbTogMzZweDtcXG59XFxuXFxuLmZvcm0taXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIG1hcmdpbi1ib3R0b206IDM2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gbGFiZWwge1xcbiAgY29sb3I6IHZhcigtLWdyZXktNDAwKTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLmZvcm0taXRlbS0tcmVxdWlyZWQgbGFiZWw6OmFmdGVyIHtcXG4gIHBhZGRpbmctbGVmdDogNHB4O1xcblxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbiAgY29udGVudDogXFxcIipcXFwiO1xcbn1cXG5cXG4uZm9ybS1pdGVtIC5oZWxwLXRleHQge1xcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuLmZvcm0taXRlbSBpbnB1dCxcXG4uZm9ybS1pdGVtIHRleHRhcmVhLFxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIG1hcmdpbjogNnB4IDA7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEge1xcbiAgcmVzaXplOiBub25lO1xcbn1cXG5cXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuXFxuICBwYWRkaW5nOiA4cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG5pbnB1dFtuYW1lPVxcXCJuYW1lXFxcIl0sXFxuaW5wdXRbbmFtZT1cXFwibGlua1xcXCJdIHtcXG4gIGhlaWdodDogNDRweDtcXG59XFxuXFxuLmJ1dHRvbi1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5idXR0b246bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxufVxcblxcbi5idXR0b24tLXNlY29uZGFyeSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTMwMCk7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbi5idXR0b24tLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0xMDApO1xcbn1cXG5cXG4ubm8tcmVzdGF1cmFudC1pdGVtLW1lc3NhZ2Uge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xcblxcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlQ29tcG9uZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gdGhpcy5nZXRUZW1wbGF0ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuL0Jhc2VDb21wb25lbnRcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIHRoaXMuc2V0RXZlbnQoKTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgJCA9IChzZWxlY3RvcikgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG5leHBvcnQgY29uc3QgJCQgPSAoc2VsZWN0b3IpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuIiwiZXhwb3J0IGNvbnN0IEZJTFRFUl9FVkVOVCA9IHtcbiAgICBjYXRlZ29yeUZpbHRlckNoYW5nZTogXCJjYXRlZ29yeUZpbHRlckNoYW5nZVwiLFxuICAgIHNvcnRGaWx0ZXJDaGFuZ2U6IFwic29ydEZpbHRlckNoYW5nZVwiLFxufTtcbmV4cG9ydCBjb25zdCBNT0RBTF9FVkVOVCA9IHtcbiAgICByZXN0YXVyYW50Rm9ybU1vZGFsQWN0aW9uOiBcInJlc3RhdXJhbnQtZm9ybS1tb2RhbC1hY3Rpb25cIixcbn07XG5leHBvcnQgY29uc3QgTU9EQUxfRVZFTlRfQUNUSU9OID0ge1xuICAgIG9wZW46IFwib3BlblwiLFxuICAgIGNsb3NlOiBcImNsb3NlXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJFU1RBVVJBTlRfRVZFTlQgPSB7XG4gICAgcmVzdGF1cmFudEZvcm1TdWJtaXQ6IFwicmVzdGF1cmFudEZvcm1TdWJtaXRcIixcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWRkLWJ1dHRvbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnkta29yZWFuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1jaGluZXNlLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS13ZXN0ZXJuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1qYXBhbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktYXNpYW4ucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LWV0Yy5wbmdcIjsiLCJpbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tIFwiLi4vYWJzdHJhY3QvQmFzZUNvbXBvbmVudFwiO1xuaW1wb3J0IFwiLi4vLi4vdGVtcGxhdGVzL2FkZC1idXR0b24ucG5nXCI7XG5pbXBvcnQgXCIuLi8uLi90ZW1wbGF0ZXMvY2F0ZWdvcnkta29yZWFuLnBuZ1wiO1xuaW1wb3J0IFwiLi4vLi4vdGVtcGxhdGVzL2NhdGVnb3J5LWNoaW5lc2UucG5nXCI7XG5pbXBvcnQgXCIuLi8uLi90ZW1wbGF0ZXMvY2F0ZWdvcnktd2VzdGVybi5wbmdcIjtcbmltcG9ydCBcIi4uLy4uL3RlbXBsYXRlcy9jYXRlZ29yeS1qYXBhbmVzZS5wbmdcIjtcbmltcG9ydCBcIi4uLy4uL3RlbXBsYXRlcy9jYXRlZ29yeS1hc2lhbi5wbmdcIjtcbmltcG9ydCBcIi4uLy4uL3RlbXBsYXRlcy9jYXRlZ29yeS1ldGMucG5nXCI7XG5jb25zdCBDQVRFR09SWV9UT19JTUFHRV9QQVRIID0ge1xuICAgIGtvcmVhbjogXCIuL2NhdGVnb3J5LWtvcmVhbi5wbmdcIixcbiAgICBjaGluZXNlOiBcIi4vY2F0ZWdvcnktY2hpbmVzZS5wbmdcIixcbiAgICBqYXBhbmVzZTogXCIuL2NhdGVnb3J5LWphcGFuZXNlLnBuZ1wiLFxuICAgIHdlc3Rlcm46IFwiLi9jYXRlZ29yeS13ZXN0ZXJuLnBuZ1wiLFxuICAgIGFzaWFuOiBcIi4vY2F0ZWdvcnktYXNpYW4ucG5nXCIsXG4gICAgZXRjOiBcIi4vY2F0ZWdvcnktZXRjLnBuZ1wiLFxufTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhdGVnb3J5SWNvbiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIGdldFRlbXBsYXRlKCkge1xuICAgICAgICBjb25zdCBjYXRlZ29yeSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiY2F0ZWdvcnlcIik7XG4gICAgICAgIGlmICghY2F0ZWdvcnkgfHwgIXRoaXMuaXNDYXRlZ29yeShjYXRlZ29yeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIuycoO2aqO2VmOyngCDslYrsnYAg7Lm07YWM6rOg66as7J6F64uI64ukLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYXRlZ29yeUltYWdlID0gdGhpcy5jb252ZXJ0Q2F0ZWdvcnlUb0ltYWdlKGNhdGVnb3J5KTtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJyZXN0YXVyYW50X19jYXRlZ29yeVwiPlxuICAgICAgICA8aW1nIGNsYXNzPVwiY2F0ZWdvcnktaWNvblwiIHNyYz0ke2NhdGVnb3J5SW1hZ2V9IGFsdD0ke2NhdGVnb3J5fT5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gICAgfVxuICAgIGlzQ2F0ZWdvcnkoY2F0ZWdvcnkpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKENBVEVHT1JZX1RPX0lNQUdFX1BBVEgpLmluY2x1ZGVzKGNhdGVnb3J5KTtcbiAgICB9XG4gICAgY29udmVydENhdGVnb3J5VG9JbWFnZShjYXRlZ29yeSkge1xuICAgICAgICByZXR1cm4gQ0FURUdPUllfVE9fSU1BR0VfUEFUSFtjYXRlZ29yeV07XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gW1wiY2F0ZWdvcnlcIl07XG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uL2Fic3RyYWN0L0Jhc2VDb21wb25lbnRcIjtcbmltcG9ydCBDYXRlZ29yeUljb24gZnJvbSBcIi4vQ2F0ZWdvcnlJY29uXCI7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJjYXRlZ29yeS1pY29uXCIsIENhdGVnb3J5SWNvbik7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN0YXVyYW50SXRlbSBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIGdldFRlbXBsYXRlKCkge1xuICAgICAgICBjb25zdCBjYXRlZ29yeSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiY2F0ZWdvcnlcIik7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XG4gICAgICAgIGNvbnN0IHRpbWVUb1JlYWNoID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0aW1lVG9SZWFjaFwiKTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aGlzLmdldEF0dHJpYnV0ZShcImRlc2NyaXB0aW9uXCIpO1xuICAgICAgICBjb25zdCBsaW5rID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJsaW5rXCIpO1xuICAgICAgICByZXR1cm4gYFxuICAgICAgPGxpIGNsYXNzPVwicmVzdGF1cmFudFwiPlxuICAgICAgICA8Y2F0ZWdvcnktaWNvbiBjYXRlZ29yeT0ke2NhdGVnb3J5fT48L2NhdGVnb3J5LWljb24+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZXN0YXVyYW50X19pbmZvXCI+XG4gICAgICAgICAgPGgzIGNsYXNzPVwicmVzdGF1cmFudF9fbmFtZSB0ZXh0LXN1YnRpdGxlXCI+JHtuYW1lfTwvaDM+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJyZXN0YXVyYW50X19kaXN0YW5jZSB0ZXh0LWJvZHlcIj7suqDtjbzsiqTrtoDthLAgJHt0aW1lVG9SZWFjaH3rtoQg64K0PC9zcGFuPlxuICAgICAgICAgIDxwIGNsYXNzPVwicmVzdGF1cmFudF9fZGVzY3JpcHRpb24gdGV4dC1ib2R5XCI+JHtkZXNjcmlwdGlvbn08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9saT5cbiAgICBgO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcImNhdGVnb3J5XCIsIFwibmFtZVwiLCBcInRpbWVUb1JlYWNoXCIsIFwiZGVzY3JpcHRpb25cIl07XG4gICAgfVxufVxuIiwiY29uc3QgY29udmVydE9iamVjdFRvT3B0aW9ucyA9IChmaWx0ZXJMaXRlcmFsT2JqZWN0KSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGZpbHRlckxpdGVyYWxPYmplY3QpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoe1xuICAgICAgICB2YWx1ZToga2V5LFxuICAgICAgICBsYWJlbDogdmFsdWUsXG4gICAgfSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbnZlcnRPYmplY3RUb09wdGlvbnM7XG4iLCJleHBvcnQgY29uc3QgQ0FURUdPUlkgPSB7XG4gICAga29yZWFuOiBcImtvcmVhblwiLFxuICAgIGNoaW5lc2U6IFwiY2hpbmVzZVwiLFxuICAgIGphcGFuZXNlOiBcImphcGFuZXNlXCIsXG4gICAgd2VzdGVybjogXCJ3ZXN0ZXJuXCIsXG4gICAgYXNpYW46IFwiYXNpYW5cIixcbiAgICBldGM6IFwiZXRjXCIsXG59O1xuZXhwb3J0IGNvbnN0IEtPUkVBTl9DQVRFR09SWSA9IHtcbiAgICBbQ0FURUdPUlkua29yZWFuXTogXCLtlZzsi51cIixcbiAgICBbQ0FURUdPUlkuY2hpbmVzZV06IFwi7KSR7IudXCIsXG4gICAgW0NBVEVHT1JZLmphcGFuZXNlXTogXCLsnbzsi51cIixcbiAgICBbQ0FURUdPUlkud2VzdGVybl06IFwi7JaR7IudXCIsXG4gICAgW0NBVEVHT1JZLmFzaWFuXTogXCLslYTsi5zslYhcIixcbiAgICBbQ0FURUdPUlkuZXRjXTogXCLquLDtg4BcIixcbn07XG4iLCJpbXBvcnQgeyBDQVRFR09SWSB9IGZyb20gXCIuL2NhdGVnb3J5XCI7XG5leHBvcnQgY29uc3QgUkVTVEFVUkFOVF9ESVNQTEFZSU5HX0ZJTFRFUiA9IHtcbiAgICAuLi5DQVRFR09SWSxcbiAgICBhbGw6IFwiYWxsXCIsXG59O1xuZXhwb3J0IGNvbnN0IEtPUkVBTl9SRVNUQVVSQU5UX0RJU1BMQVlJTkdfRklMVEVSID0ge1xuICAgIFtSRVNUQVVSQU5UX0RJU1BMQVlJTkdfRklMVEVSLmFsbF06IFwi7KCE7LK0XCIsXG4gICAgW1JFU1RBVVJBTlRfRElTUExBWUlOR19GSUxURVIua29yZWFuXTogXCLtlZzsi51cIixcbiAgICBbUkVTVEFVUkFOVF9ESVNQTEFZSU5HX0ZJTFRFUi5jaGluZXNlXTogXCLspJHsi51cIixcbiAgICBbUkVTVEFVUkFOVF9ESVNQTEFZSU5HX0ZJTFRFUi5qYXBhbmVzZV06IFwi7J287IudXCIsXG4gICAgW1JFU1RBVVJBTlRfRElTUExBWUlOR19GSUxURVIud2VzdGVybl06IFwi7JaR7IudXCIsXG4gICAgW1JFU1RBVVJBTlRfRElTUExBWUlOR19GSUxURVIuYXNpYW5dOiBcIuyVhOyLnOyViFwiLFxuICAgIFtSRVNUQVVSQU5UX0RJU1BMQVlJTkdfRklMVEVSLmV0Y106IFwi6riw7YOAXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNPUlRfRklMVEVSID0ge1xuICAgIG5hbWU6IFwibmFtZVwiLFxuICAgIHRpbWVUb1JlYWNoOiBcInRpbWVUb1JlYWNoXCIsXG59O1xuZXhwb3J0IGNvbnN0IEtPUkVBTl9TT1JUX0ZJTFRFUiA9IHtcbiAgICBbU09SVF9GSUxURVIubmFtZV06IFwi7J2066aE7IicXCIsXG4gICAgW1NPUlRfRklMVEVSLnRpbWVUb1JlYWNoXTogXCLqsbDrpqzsiJxcIixcbn07XG4iLCJjb25zdCBSRVNUQVVSQU5UID0ge1xuICAgIG1pbk5hbWVMZW5ndGg6IDEsXG4gICAgbWF4TmFtZUxlbmd0aDogMjAsXG4gICAgbWluQ2F0ZWdvcnlMZW5ndGg6IDEsXG4gICAgbWF4Q2F0ZWdvcnlMZW5ndGg6IDIwLFxuICAgIG1pblRpbWVUb1JlYWNoOiAxLFxuICAgIG1heFRpbWVUb1JlYWNoOiA2MCxcbiAgICBtYXhEZXNjcmlwdGlvbkxlbmd0aDogNTAwLFxuICAgIG1heExpbmtMZW5ndGg6IDUwMCxcbn07XG5leHBvcnQgZGVmYXVsdCBSRVNUQVVSQU5UO1xuIiwiZXhwb3J0IGNvbnN0IHZhbGlkYXRlSW5SYW5nZSA9IChtaW4sIG1heCwgdmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihg6rCS7J20ICR7bWlufeydtOyDgSAke21heH3snbTtlZjsl6zslbwg7ZWp64uI64ukLmApO1xufTtcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZU51bWJlckJlbG93ID0gKG1heCwgdmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDqsJLsnbQgJHttYXh97J207ZWY7Jes7JW8IO2VqeuLiOuLpC5gKTtcbiAgICB9XG59O1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9SZXN0YXVyYW50X2luc3RhbmNlcywgX1Jlc3RhdXJhbnRfbmFtZSwgX1Jlc3RhdXJhbnRfdGltZVRvUmVhY2gsIF9SZXN0YXVyYW50X2Rlc2NyaXB0aW9uLCBfUmVzdGF1cmFudF9jYXRlZ29yeSwgX1Jlc3RhdXJhbnRfbGluaywgX1Jlc3RhdXJhbnRfdmFsaWRhdGVQcm9wcywgX1Jlc3RhdXJhbnRfdmFsaWRhdGVOYW1lLCBfUmVzdGF1cmFudF92YWxpZGF0ZUNhdGVnb3J5LCBfUmVzdGF1cmFudF92YWxpZGF0ZVRpbWVUb1JlYWNoLCBfUmVzdGF1cmFudF92YWxpZGF0ZURlc2NyaXB0aW9uLCBfUmVzdGF1cmFudF92YWxpZGF0ZUxpbms7XG5pbXBvcnQgeyBDQVRFR09SWSB9IGZyb20gXCIuLi9jb25zdGFudHMvY2F0ZWdvcnlcIjtcbmltcG9ydCBSRVNUQVVSQU5UIGZyb20gXCIuLi9jb25zdGFudHMvcmVzdGF1cmFudFwiO1xuaW1wb3J0IHsgdmFsaWRhdGVJblJhbmdlLCB2YWxpZGF0ZU51bWJlckJlbG93IH0gZnJvbSBcIi4uL3V0aWxzL3ZhbGlkYXRvclwiO1xuY2xhc3MgUmVzdGF1cmFudCB7XG4gICAgY29uc3RydWN0b3IoeyBuYW1lLCBjYXRlZ29yeSwgdGltZVRvUmVhY2gsIGRlc2NyaXB0aW9uLCBsaW5rLCB9KSB7XG4gICAgICAgIF9SZXN0YXVyYW50X2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50X25hbWUuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50X3RpbWVUb1JlYWNoLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudF9kZXNjcmlwdGlvbi5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRfY2F0ZWdvcnkuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50X2xpbmsuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVQcm9wcykuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgY2F0ZWdvcnksXG4gICAgICAgICAgICB0aW1lVG9SZWFjaCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbGluayxcbiAgICAgICAgfSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRfbmFtZSwgbmFtZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50X2NhdGVnb3J5LCBjYXRlZ29yeSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50X3RpbWVUb1JlYWNoLCB0aW1lVG9SZWFjaCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50X2Rlc2NyaXB0aW9uLCBkZXNjcmlwdGlvbiwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50X2xpbmssIGxpbmssIFwiZlwiKTtcbiAgICB9XG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRfbmFtZSwgXCJmXCIpO1xuICAgIH1cbiAgICBnZXRJbmZvKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudF9uYW1lLCBcImZcIiksXG4gICAgICAgICAgICBjYXRlZ29yeTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudF9jYXRlZ29yeSwgXCJmXCIpLFxuICAgICAgICAgICAgdGltZVRvUmVhY2g6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRfdGltZVRvUmVhY2gsIFwiZlwiKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50X2Rlc2NyaXB0aW9uLCBcImZcIiksXG4gICAgICAgICAgICBsaW5rOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50X2xpbmssIFwiZlwiKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5fUmVzdGF1cmFudF9uYW1lID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRfdGltZVRvUmVhY2ggPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudF9kZXNjcmlwdGlvbiA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50X2NhdGVnb3J5ID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRfbGluayA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50X2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50X3ZhbGlkYXRlUHJvcHMgPSBmdW5jdGlvbiBfUmVzdGF1cmFudF92YWxpZGF0ZVByb3BzKHsgbmFtZSwgY2F0ZWdvcnksIHRpbWVUb1JlYWNoLCBkZXNjcmlwdGlvbiwgbGluaywgfSkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVOYW1lKS5jYWxsKHRoaXMsIG5hbWUpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVDYXRlZ29yeSkuY2FsbCh0aGlzLCBjYXRlZ29yeSk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudF9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudF92YWxpZGF0ZVRpbWVUb1JlYWNoKS5jYWxsKHRoaXMsIHRpbWVUb1JlYWNoKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50X2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50X3ZhbGlkYXRlRGVzY3JpcHRpb24pLmNhbGwodGhpcywgZGVzY3JpcHRpb24pO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVMaW5rKS5jYWxsKHRoaXMsIGxpbmspO1xufSwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVOYW1lID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRfdmFsaWRhdGVOYW1lKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUluUmFuZ2UoUkVTVEFVUkFOVC5taW5OYW1lTGVuZ3RoLCBSRVNUQVVSQU5ULm1heE5hbWVMZW5ndGgsIG5hbWUubGVuZ3RoKTtcbn0sIF9SZXN0YXVyYW50X3ZhbGlkYXRlQ2F0ZWdvcnkgPSBmdW5jdGlvbiBfUmVzdGF1cmFudF92YWxpZGF0ZUNhdGVnb3J5KGNhdGVnb3J5KSB7XG4gICAgdmFsaWRhdGVJblJhbmdlKFJFU1RBVVJBTlQubWluQ2F0ZWdvcnlMZW5ndGgsIFJFU1RBVVJBTlQubWF4Q2F0ZWdvcnlMZW5ndGgsIGNhdGVnb3J5Lmxlbmd0aCk7XG4gICAgaWYgKCFPYmplY3Qua2V5cyhDQVRFR09SWSkuaW5jbHVkZXMoY2F0ZWdvcnkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2F0ZWdvcnlcIik7XG4gICAgfVxufSwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVUaW1lVG9SZWFjaCA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50X3ZhbGlkYXRlVGltZVRvUmVhY2godGltZVRvUmVhY2gpIHtcbiAgICB2YWxpZGF0ZUluUmFuZ2UoUkVTVEFVUkFOVC5taW5UaW1lVG9SZWFjaCwgUkVTVEFVUkFOVC5tYXhUaW1lVG9SZWFjaCwgdGltZVRvUmVhY2gpO1xufSwgX1Jlc3RhdXJhbnRfdmFsaWRhdGVEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50X3ZhbGlkYXRlRGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcbiAgICB2YWxpZGF0ZU51bWJlckJlbG93KFJFU1RBVVJBTlQubWF4RGVzY3JpcHRpb25MZW5ndGgsIGRlc2NyaXB0aW9uLmxlbmd0aCk7XG59LCBfUmVzdGF1cmFudF92YWxpZGF0ZUxpbmsgPSBmdW5jdGlvbiBfUmVzdGF1cmFudF92YWxpZGF0ZUxpbmsobGluaykge1xuICAgIHZhbGlkYXRlTnVtYmVyQmVsb3coUkVTVEFVUkFOVC5tYXhMaW5rTGVuZ3RoLCBsaW5rLmxlbmd0aCk7XG59O1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfUmVzdGF1cmFudHNfaW5zdGFuY2VzLCBfUmVzdGF1cmFudHNfcmVzdGF1cmFudHMsIF9SZXN0YXVyYW50c192YWxpZGF0ZVVuaXF1ZU5hbWU7XG5jbGFzcyBSZXN0YXVyYW50cyB7XG4gICAgY29uc3RydWN0b3IocmVzdGF1cmFudHMpIHtcbiAgICAgICAgX1Jlc3RhdXJhbnRzX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50c19yZXN0YXVyYW50cy5zZXQodGhpcywgW10pO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50c19pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudHNfdmFsaWRhdGVVbmlxdWVOYW1lKS5jYWxsKHRoaXMsIHJlc3RhdXJhbnRzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudHNfcmVzdGF1cmFudHMsIHJlc3RhdXJhbnRzLCBcImZcIik7XG4gICAgfVxuICAgIGFkZChyZXN0YXVyYW50KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50c192YWxpZGF0ZVVuaXF1ZU5hbWUpLmNhbGwodGhpcywgWy4uLl9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRzX3Jlc3RhdXJhbnRzLCBcImZcIiksIHJlc3RhdXJhbnRdKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudHNfcmVzdGF1cmFudHMsIFsuLi5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50c19yZXN0YXVyYW50cywgXCJmXCIpLCByZXN0YXVyYW50XSwgXCJmXCIpO1xuICAgIH1cbiAgICBnZXREZXRhaWxzKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudHNfcmVzdGF1cmFudHMsIFwiZlwiKS5tYXAoKHJlc3RhdXJhbnQpID0+IHJlc3RhdXJhbnQuZ2V0SW5mbygpKTtcbiAgICB9XG59XG5fUmVzdGF1cmFudHNfcmVzdGF1cmFudHMgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudHNfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1Jlc3RhdXJhbnRzX3ZhbGlkYXRlVW5pcXVlTmFtZSA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50c192YWxpZGF0ZVVuaXF1ZU5hbWUocmVzdGF1cmFudHMpIHtcbiAgICBjb25zdCBuYW1lcyA9IHJlc3RhdXJhbnRzLm1hcCgocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5nZXROYW1lKCkpO1xuICAgIGlmIChuZXcgU2V0KG5hbWVzKS5zaXplICE9PSBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi7KSR67O165CcIOyLneuLuSDsnbTrpoTsnbQg7J6I7Iq164uI64ukLlwiKTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudHM7XG4iLCJjb25zdCBsb2NhbFN0b3JlID0ge1xuICAgIGdldFBhcnNlZEl0ZW0oa2V5KSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGl0ZW0pO1xuICAgIH0sXG4gICAgc2V0SXRlbShrZXksIHZhbHVlKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICB9LFxuICAgIHJlc2V0KCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgICB9LFxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsU3RvcmU7XG4iLCJpbXBvcnQgUmVzdGF1cmFudCBmcm9tIFwiLi4vZG9tYWluL1Jlc3RhdXJhbnRcIjtcbmltcG9ydCBSZXN0YXVyYW50cyBmcm9tIFwiLi4vZG9tYWluL1Jlc3RhdXJhbnRzXCI7XG5pbXBvcnQgbG9jYWxTdG9yZSBmcm9tIFwiLi9sb2NhbFN0b3JhZ2VTdG9yZVwiO1xuY29uc3QgcmVzdGF1cmFudFN0b3JlID0ge1xuICAgIGdldFJlc3RhdXJhbnRzKCkge1xuICAgICAgICBjb25zdCByZXN0YXVyYW50SW5mb3MgPSBsb2NhbFN0b3JlLmdldFBhcnNlZEl0ZW0oXCJyZXN0YXVyYW50c1wiKTtcbiAgICAgICAgaWYgKCFyZXN0YXVyYW50SW5mb3MpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVzdGF1cmFudHMoW10pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN0YXVyYW50c0FycmF5ID0gcmVzdGF1cmFudEluZm9zLm1hcCgocmVzdGF1cmFudCkgPT4gbmV3IFJlc3RhdXJhbnQocmVzdGF1cmFudCkpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXN0YXVyYW50cyhyZXN0YXVyYW50c0FycmF5KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICBsb2NhbFN0b3JlLnJlc2V0KCk7XG4gICAgICAgICAgICBhbGVydChcIuuNsOydtO2EsCDqsbTrk6Tsp4Ag66eI7IS47JqUIVwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJlc3RhdXJhbnRzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNldFJlc3RhdXJuYXRzKHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIGxvY2FsU3RvcmUuc2V0SXRlbShcInJlc3RhdXJhbnRzXCIsIHJlc3RhdXJhbnRzLmdldERldGFpbHMoKSk7XG4gICAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCByZXN0YXVyYW50U3RvcmU7XG4iLCJpbXBvcnQgRXZlbnRDb21wb25lbnQgZnJvbSBcIi4uL2Fic3RyYWN0L0V2ZW50Q29tcG9uZW50XCI7XG5pbXBvcnQgUmVzdGF1cmFudEl0ZW0gZnJvbSBcIi4vUmVzdGF1cmFudEl0ZW1cIjtcbmltcG9ydCBGaWx0ZXJCYXIgZnJvbSBcIi4vRmlsdGVyQmFyXCI7XG5pbXBvcnQgUmVzdGF1cmFudCBmcm9tIFwiLi4vZG9tYWluL1Jlc3RhdXJhbnRcIjtcbmltcG9ydCByZXN0YXVyYW50U3RvcmUgZnJvbSBcIi4uL3N0b3JlL3Jlc3RhdXJhbnRTdG9yZVwiO1xuaW1wb3J0IHsgUkVTVEFVUkFOVF9ESVNQTEFZSU5HX0ZJTFRFUiwgU09SVF9GSUxURVIgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2ZpbHRlclwiO1xuaW1wb3J0IHsgRklMVEVSX0VWRU5ULCBSRVNUQVVSQU5UX0VWRU5UIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9ldmVudFwiO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwicmVzdGF1cmFudC1pdGVtXCIsIFJlc3RhdXJhbnRJdGVtKTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImZpbHRlci1iYXJcIiwgRmlsdGVyQmFyKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3RhdXJhbnRMaXN0IGV4dGVuZHMgRXZlbnRDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHJlc3RhdXJhbnRzID0gcmVzdGF1cmFudFN0b3JlLmdldFJlc3RhdXJhbnRzKCksIGNhdGVnb3J5RmlsdGVyID0gUkVTVEFVUkFOVF9ESVNQTEFZSU5HX0ZJTFRFUi5hbGwsIHNvcnRGaWx0ZXIgPSBTT1JUX0ZJTFRFUi5uYW1lKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmVzdGF1cmFudHMgPSByZXN0YXVyYW50cztcbiAgICAgICAgdGhpcy5jYXRlZ29yeUZpbHRlciA9IGNhdGVnb3J5RmlsdGVyO1xuICAgICAgICB0aGlzLnNvcnRGaWx0ZXIgPSBzb3J0RmlsdGVyO1xuICAgIH1cbiAgICBnZXRUZW1wbGF0ZSgpIHtcbiAgICAgICAgY29uc3QgcmVzdGF1cmFudEluZm9zID0gdGhpcy5yZXN0YXVyYW50cy5nZXREZXRhaWxzKCk7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkUmVzdGF1cmFudEluZm9zID0gdGhpcy5maWx0ZXJCeUNhdGVnb3J5KHJlc3RhdXJhbnRJbmZvcywgdGhpcy5jYXRlZ29yeUZpbHRlcik7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlpbmdSZXN0YXVyYW50SW5mb3MgPSB0aGlzLnNvcnQoZmlsdGVyZWRSZXN0YXVyYW50SW5mb3MsIHRoaXMuc29ydEZpbHRlcik7XG4gICAgICAgIHJldHVybiBgXG4gICAgICA8c2VjdGlvbiBjbGFzcz1cInJlc3RhdXJhbnQtbGlzdC1jb250YWluZXJcIj5cbiAgICAgICAgPHVsIGNsYXNzPVwicmVzdGF1cmFudC1saXN0XCI+XG4gICAgICAgICAgJHtkaXNwbGF5aW5nUmVzdGF1cmFudEluZm9zXG4gICAgICAgICAgICAubWFwKCh7IG5hbWUsIGNhdGVnb3J5LCB0aW1lVG9SZWFjaCwgZGVzY3JpcHRpb24sIGxpbmssIH0pID0+IGBcbiAgICAgICAgICAgIDxyZXN0YXVyYW50LWl0ZW0gbmFtZT1cIiR7bmFtZX1cIiBjYXRlZ29yeT1cIiR7Y2F0ZWdvcnl9XCIgdGltZVRvUmVhY2g9XCIke3RpbWVUb1JlYWNofVwiIGRlc2NyaXB0aW9uPVwiJHtkZXNjcmlwdGlvbn1cIiBsaW5rPVwiJHtsaW5rfVwiPlxuICAgICAgICAgICAgPC9yZXN0YXVyYW50LWl0ZW0+YClcbiAgICAgICAgICAgIC5qb2luKFwiXCIpIHx8XG4gICAgICAgICAgICBcIjxwIGNsYXNzPSduby1yZXN0YXVyYW50LWl0ZW0tbWVzc2FnZSc+65Ox66Gd65CcIOyLneuLueydtCDsl4bsirXri4jri6QuPGJyLz4g7Iud64u57J2EIOy2lOqwgO2VtOyjvOyEuOyalCDwn5Go8J+Pu+KAjfCfjbM8L3A+XCJ9XG4gICAgICAgIDwvdWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgYDtcbiAgICB9XG4gICAgc2V0RXZlbnQoKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoRklMVEVSX0VWRU5ULmNhdGVnb3J5RmlsdGVyQ2hhbmdlLCAoZSkgPT4gdGhpcy5oYW5kbGVDYXRlZ29yeUZpbHRlckNoYW5nZShlKSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoRklMVEVSX0VWRU5ULnNvcnRGaWx0ZXJDaGFuZ2UsIChlKSA9PiB0aGlzLmhhbmRsZVNvcnRGaWx0ZXJDaGFuZ2UoZSkpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFJFU1RBVVJBTlRfRVZFTlQucmVzdGF1cmFudEZvcm1TdWJtaXQsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJlc3RhdXJhbnRGb3JtU3VibWl0KGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaGFuZGxlQ2F0ZWdvcnlGaWx0ZXJDaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZTogY2F0ZWdvcnlGaWx0ZXIgfSA9IGV2ZW50Py5kZXRhaWw7XG4gICAgICAgIHRoaXMuY2F0ZWdvcnlGaWx0ZXIgPSBjYXRlZ29yeUZpbHRlcjtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgaGFuZGxlU29ydEZpbHRlckNoYW5nZShldmVudCkge1xuICAgICAgICBjb25zdCB7IHZhbHVlOiBzb3J0RmlsdGVyIH0gPSBldmVudD8uZGV0YWlsO1xuICAgICAgICB0aGlzLnNvcnRGaWx0ZXIgPSBzb3J0RmlsdGVyO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICBoYW5kbGVSZXN0YXVyYW50Rm9ybVN1Ym1pdChldmVudCkge1xuICAgICAgICBjb25zdCB7IHBheWxvYWQsIGNsZWFuVXAgfSA9IGV2ZW50Py5kZXRhaWw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN0YXVyYW50ID0gbmV3IFJlc3RhdXJhbnQocGF5bG9hZCk7XG4gICAgICAgICAgICB0aGlzLnJlc3RhdXJhbnRzLmFkZChyZXN0YXVyYW50KTtcbiAgICAgICAgICAgIHJlc3RhdXJhbnRTdG9yZS5zZXRSZXN0YXVybmF0cyh0aGlzLnJlc3RhdXJhbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBhbGVydChlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhblVwKCk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIGZpbHRlckJ5Q2F0ZWdvcnkocmVzdGF1cmFudEluZm9zLCBjYXRlZ29yeUZpbHRlcikge1xuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKFJFU1RBVVJBTlRfRElTUExBWUlOR19GSUxURVIpLmluY2x1ZGVzKGNhdGVnb3J5RmlsdGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRJbmZvcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2F0ZWdvcnlGaWx0ZXIgPT09IFJFU1RBVVJBTlRfRElTUExBWUlOR19GSUxURVIuYWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdGF1cmFudEluZm9zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN0YXVyYW50SW5mb3MuZmlsdGVyKCh7IGNhdGVnb3J5IH0pID0+IGNhdGVnb3J5ID09PSBjYXRlZ29yeUZpbHRlcik7XG4gICAgfVxuICAgIHNvcnQocmVzdGF1cmFudEluZm9zLCBzb3J0RmlsdGVyKSB7XG4gICAgICAgIGlmIChzb3J0RmlsdGVyID09PSBTT1JUX0ZJTFRFUi5uYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdGF1cmFudEluZm9zLnNvcnQoKGEsIGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3J0RmlsdGVyID09PSBTT1JUX0ZJTFRFUi50aW1lVG9SZWFjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRJbmZvcy5zb3J0KChhLCBiKSA9PiBhLnRpbWVUb1JlYWNoIC0gYi50aW1lVG9SZWFjaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRJbmZvcztcbiAgICB9XG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHJldHVybiBbXCJyZXN0YXVyYW50c1wiXTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tIFwiLi4vYWJzdHJhY3QvQmFzZUNvbXBvbmVudFwiO1xuaW1wb3J0IGNvbnZlcnRPYmplY3RUb09wdGlvbnMgZnJvbSBcIi4uL3V0aWxzL2NvbnZlcnRPYmplY3RUb09wdGlvbnNcIjtcbmltcG9ydCB7IEZJTFRFUl9FVkVOVCB9IGZyb20gXCIuLi9jb25zdGFudHMvZXZlbnRcIjtcbmltcG9ydCB7IEtPUkVBTl9SRVNUQVVSQU5UX0RJU1BMQVlJTkdfRklMVEVSLCBLT1JFQU5fU09SVF9GSUxURVIsIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9maWx0ZXJcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlckJhciBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIGdldFRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgIDxzZWN0aW9uIGNsYXNzPVwicmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyXCI+XG4gICAgICA8c2VsZWN0LWJveFxuICAgICAgICBzZWxlY3QtaWQ9XCJjYXRlZ29yeS1zZWxlY3RcIlxuICAgICAgICBjbGFzcy1uYW1lPVwicmVzdGF1cmFudC1maWx0ZXJcIiBcbiAgICAgICAgb3B0aW9ucz0ke3RoaXMuZ2VuZXJhdGVDYXRlZ29yeU9wdGlvbnMoKX1cbiAgICAgICAgZXZlbnQtbmFtZT0ke0ZJTFRFUl9FVkVOVC5jYXRlZ29yeUZpbHRlckNoYW5nZX1cbiAgICAgID48L3NlbGVjdC1ib3g+XG5cbiAgICAgIDxzZWxlY3QtYm94XG4gICAgICAgIHNlbGVjdC1pZD1cInNvcnRpbmctZmlsdGVyXCJcbiAgICAgICAgY2xhc3MtbmFtZT1cInJlc3RhdXJhbnQtZmlsdGVyXCJcbiAgICAgICAgb3B0aW9ucz0ke3RoaXMuZ2VuZXJhdGVTb3J0aW5nT3B0aW9ucygpfVxuICAgICAgICBldmVudC1uYW1lPSR7RklMVEVSX0VWRU5ULnNvcnRGaWx0ZXJDaGFuZ2V9XG4gICAgICA+PC9zZWxlY3QtYm94PlxuICAgIDwvc2VjdGlvbj5cbmA7XG4gICAgfVxuICAgIGdlbmVyYXRlQ2F0ZWdvcnlPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZU9wdGlvbnMoS09SRUFOX1JFU1RBVVJBTlRfRElTUExBWUlOR19GSUxURVIpO1xuICAgIH1cbiAgICBnZW5lcmF0ZVNvcnRpbmdPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZU9wdGlvbnMoS09SRUFOX1NPUlRfRklMVEVSKTtcbiAgICB9XG4gICAgZ2VuZXJhdGVPcHRpb25zKGZpbHRlckxpdGVyYWxPYmplY3QpIHtcbiAgICAgICAgY29uc3QgZmlpbHRlcmVkT3B0aW9ucyA9IGNvbnZlcnRPYmplY3RUb09wdGlvbnMoZmlsdGVyTGl0ZXJhbE9iamVjdCk7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShmaWlsdGVyZWRPcHRpb25zKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgRXZlbnRDb21wb25lbnQgZnJvbSBcIi4uL2Fic3RyYWN0L0V2ZW50Q29tcG9uZW50XCI7XG5pbXBvcnQgRm9ybUl0ZW0gZnJvbSBcIi4vY29tbW9uL0Zvcm1JdGVtXCI7XG5pbXBvcnQgeyBNT0RBTF9FVkVOVCwgTU9EQUxfRVZFTlRfQUNUSU9OLCBSRVNUQVVSQU5UX0VWRU5ULCB9IGZyb20gXCIuLi9jb25zdGFudHMvZXZlbnRcIjtcbmltcG9ydCBjb252ZXJ0T2JqZWN0VG9PcHRpb25zIGZyb20gXCIuLi91dGlscy9jb252ZXJ0T2JqZWN0VG9PcHRpb25zXCI7XG5pbXBvcnQgeyAkIH0gZnJvbSBcIi4uL3V0aWxzL3NlbGVjdG9yXCI7XG5pbXBvcnQgeyBLT1JFQU5fQ0FURUdPUlkgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NhdGVnb3J5XCI7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJmb3JtLWl0ZW1cIiwgRm9ybUl0ZW0pO1xuY29uc3QgZGlzdGFuY2VPcHRpb25zID0gW1xuICAgIHsgdmFsdWU6IFwiXCIsIGxhYmVsOiBcIuyEoO2Dne2VtCZuYnNwO+yjvOyEuOyalFwiIH0sXG4gICAgeyB2YWx1ZTogXCI1XCIsIGxhYmVsOiBcIjXrtoQmbmJzcDvrgrRcIiB9LFxuICAgIHsgdmFsdWU6IFwiMTBcIiwgbGFiZWw6IFwiMTDrtoQmbmJzcDvrgrRcIiB9LFxuICAgIHsgdmFsdWU6IFwiMTVcIiwgbGFiZWw6IFwiMTXrtoQmbmJzcDvrgrRcIiB9LFxuICAgIHsgdmFsdWU6IFwiMjBcIiwgbGFiZWw6IFwiMjDrtoQmbmJzcDvrgrRcIiB9LFxuICAgIHsgdmFsdWU6IFwiMzBcIiwgbGFiZWw6IFwiMzDrtoQmbmJzcDvrgrRcIiB9LFxuXTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3RhdXJhbnRGb3JtIGV4dGVuZHMgRXZlbnRDb21wb25lbnQge1xuICAgIGdldFRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgIDxoMiBjbGFzcz1cIm1vZGFsLXRpdGxlIHRleHQtdGl0bGVcIj7sg4jroZzsmrQg7J2M7Iud7KCQPC9oMj5cbiAgICA8Zm9ybT5cbiAgICAgIDxmb3JtLWl0ZW0gdGl0bGU9XCLsubTthYzqs6DrpqxcIiByZXF1aXJlZD1cInRydWVcIiBsYWJlbC1mb3I9XCJjYXRlZ29yeVwiPlxuICAgICAgICA8c2VsZWN0LWJveFxuICAgICAgICAgIHNlbGVjdC1pZD1cImNhdGVnb3J5XCJcbiAgICAgICAgICBuYW1lPVwiY2F0ZWdvcnlcIlxuICAgICAgICAgIG9wdGlvbnM9JHt0aGlzLmdlbmVyYXRlQ2F0ZWdvcnlPcHRpb25zKCl9XG4gICAgICAgICAgcmVxdWlyZWQ9XCJ0cnVlXCJcbiAgICAgICAgPlxuICAgICAgICA8L3NlbGVjdC1ib3g+XG4gICAgICA8L2Zvcm0taXRlbT5cblxuICAgICAgPGZvcm0taXRlbSB0aXRsZT1cIuydtOumhFwiIHJlcXVpcmVkPVwidHJ1ZVwiIGlkPVwibmFtZVwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cIm5hbWVcIiBuYW1lPVwibmFtZVwiIHJlcXVpcmVkPlxuICAgICAgPC9mb3JtLWl0ZW0+XG5cbiAgICAgIDxmb3JtLWl0ZW0gdGl0bGU9XCLqsbDrpqwo64+E67O0IOydtOuPmSDsi5zqsIQpXCIgcmVxdWlyZWQ9XCJ0cnVlXCIgbGFiZWwtZm9yPVwidGltZS10by1yZWFjaFwiPlxuICAgICAgICA8c2VsZWN0LWJveFxuICAgICAgICAgIHNlbGVjdC1pZD1cInRpbWUtdG8tcmVhY2hcIlxuICAgICAgICAgIG5hbWU9XCJ0aW1lLXRvLXJlYWNoXCJcbiAgICAgICAgICBvcHRpb25zPSR7SlNPTi5zdHJpbmdpZnkoZGlzdGFuY2VPcHRpb25zKX1cbiAgICAgICAgICByZXF1aXJlZD1cInRydWVcIlxuICAgICAgICA+XG4gICAgICAgIDwvc2VsZWN0LWJveD5cbiAgICAgIDwvZm9ybS1pdGVtPlxuXG4gICAgICA8Zm9ybS1pdGVtIHRpdGxlPVwi7ISk66qFXCIgbGFiZWwtZm9yPVwiZGVzY3JpcHRpb25cIiBoZWxwLXRleHQ9XCLrqZTribQg65OxIOy2lOqwgCDsoJXrs7Trpbwg7J6F66Cl7ZW0IOyjvOyEuOyalC5cIn0+XG4gICAgICAgIDx0ZXh0YXJlYSBuYW1lPVwiZGVzY3JpcHRpb25cIiBpZD1cImRlc2NyaXB0aW9uXCIgY29scz1cIjMwXCIgcm93cz1cIjVcIj48L3RleHRhcmVhPlxuICAgICAgPC9mb3JtLWl0ZW0+XG5cbiAgICAgIDxmb3JtLWl0ZW0gdGl0bGU9XCLssLjqs6Ag66eB7YGsXCIgbGFiZWwtZm9yPVwibGlua1wiIGhlbHAtdGV4dD1cIuunpOyepSDsoJXrs7Trpbwg7ZmV7J247ZWgIOyImCDsnojripQg66eB7YGs66W8IOyeheugpe2VtCDso7zshLjsmpQuXCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJsaW5rXCIgaWQ9XCJsaW5rXCIgLz5cbiAgICAgIDwvZm9ybS1pdGVtPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLWNvbnRhaW5lclwiPlxuICAgICAgICA8YnV0dG9uIGlkPVwiY2xvc2UtYnV0dG9uXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi0tc2Vjb25kYXJ5IHRleHQtY2FwdGlvblwiPuy3qOyGjO2VmOq4sDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi0tcHJpbWFyeSB0ZXh0LWNhcHRpb25cIj7stpTqsIDtlZjquLA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbmA7XG4gICAgfVxuICAgIHNldEV2ZW50KCkge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5oYW5kbGVTdWJtaXQpO1xuICAgICAgICAkKFwiI2Nsb3NlLWJ1dHRvblwiKT8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlQ2xvc2VCdXR0b25DbGljayk7XG4gICAgfVxuICAgIGhhbmRsZUNsb3NlQnV0dG9uQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoTU9EQUxfRVZFTlQucmVzdGF1cmFudEZvcm1Nb2RhbEFjdGlvbiwge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbDogeyBhY3Rpb246IE1PREFMX0VWRU5UX0FDVElPTi5jbG9zZSB9LFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGhhbmRsZVN1Ym1pdChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgZm9ybSA9IGUudGFyZ2V0O1xuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IE9iamVjdC5mcm9tRW50cmllcyhmb3JtRGF0YSk7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gJChcIiNjYXRlZ29yeVwiKS52YWx1ZTtcbiAgICAgICAgY29uc3QgdGltZVRvUmVhY2ggPSAkKFwiI3RpbWUtdG8tcmVhY2hcIikudmFsdWU7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgY2F0ZWdvcnksXG4gICAgICAgICAgICB0aW1lVG9SZWFjaDogTnVtYmVyKHRpbWVUb1JlYWNoKSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2xlYW5VcCA9ICgpID0+IHtcbiAgICAgICAgICAgIGUudGFyZ2V0Py5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChNT0RBTF9FVkVOVC5yZXN0YXVyYW50Rm9ybU1vZGFsQWN0aW9uLCB7XG4gICAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHsgYWN0aW9uOiBNT0RBTF9FVkVOVF9BQ1RJT04uY2xvc2UgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChSRVNUQVVSQU5UX0VWRU5ULnJlc3RhdXJhbnRGb3JtU3VibWl0LCB7XG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgICAgICAgICBjbGVhblVwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZW5lcmF0ZUNhdGVnb3J5T3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVPcHRpb25zKEtPUkVBTl9DQVRFR09SWSk7XG4gICAgfVxuICAgIGdlbmVyYXRlT3B0aW9ucyhmaWx0ZXJMaXRlcmFsT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IGNvbnZlcnRPYmplY3RUb09wdGlvbnMoZmlsdGVyTGl0ZXJhbE9iamVjdCk7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShmaWx0ZXJlZE9wdGlvbnMpO1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi9hYnN0cmFjdC9CYXNlQ29tcG9uZW50XCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtSXRlbSBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIGdldFRlbXBsYXRlKCkge1xuICAgICAgICBjb25zdCBsYWJlbEZvciA9IHRoaXMuZ2V0QXR0cmlidXRlKFwibGFiZWwtZm9yXCIpO1xuICAgICAgICBjb25zdCB0aXRsZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwidGl0bGVcIik7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVkID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJyZXF1aXJlZFwiKTtcbiAgICAgICAgY29uc3QgaGVscFRleHQgPSB0aGlzLmdldEF0dHJpYnV0ZShcImhlbHAtdGV4dFwiKTtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmlubmVySFRNTDtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWl0ZW0ke3JlcXVpcmVkID8gXCIgZm9ybS1pdGVtLS1yZXF1aXJlZFwiIDogXCJcIn1cIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cIiR7bGFiZWxGb3J9IHRleHQtY2FwdGlvblwiPiR7dGl0bGV9PC9sYWJlbD5cbiAgICAgICAgJHtjaGlsZHJlbn1cbiAgICAgICAgJHtoZWxwVGV4dFxuICAgICAgICAgICAgPyBgPHNwYW4gY2xhc3M9XCJoZWxwLXRleHQgdGV4dC1jYXB0aW9uXCI+JHtoZWxwVGV4dH08L3NwYW4+YFxuICAgICAgICAgICAgOiBcIlwifVxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgICB9XG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHJldHVybiBbXCJ0aXRsZVwiLCBcInJlcXVpcmVkXCIsIFwiaGVscC10ZXh0XCIsIFwibGFiZWwtZm9yXCJdO1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuL2Fic3RyYWN0L0Jhc2VDb21wb25lbnRcIjtcbmltcG9ydCBTZWxlY3QgZnJvbSBcIi4vY29tcG9uZW50cy9jb21tb24vU2VsZWN0XCI7XG5pbXBvcnQgTW9kYWwgZnJvbSBcIi4vY29tcG9uZW50cy9jb21tb24vTW9kYWxcIjtcbmltcG9ydCBSZXN0YXVyYW50SGVhZGVyIGZyb20gXCIuL2NvbXBvbmVudHMvUmVzdGF1cmFudEhlYWRlclwiO1xuaW1wb3J0IFJlc3RhdXJhbnRMaXN0IGZyb20gXCIuL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3RcIjtcbmltcG9ydCBSZXN0YXVyYW50Rm9ybSBmcm9tIFwiLi9jb21wb25lbnRzL1Jlc3RhdXJhbnRGb3JtXCI7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJyZXN0YXVyYW50LWhlYWRlclwiLCBSZXN0YXVyYW50SGVhZGVyKTtcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInJlc3RhcnVhbnQtbGlzdFwiLCBSZXN0YXVyYW50TGlzdCk7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJzZWxlY3QtYm94XCIsIFNlbGVjdCk7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJtb2RhbC1ib3hcIiwgTW9kYWwpO1xuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwicmVzdGF1cmFudC1mb3JtXCIsIFJlc3RhdXJhbnRGb3JtKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEx1bmNoQXBwIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgZ2V0VGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgIDxyZXN0YXVyYW50LWhlYWRlcj48L3Jlc3RhdXJhbnQtaGVhZGVyPiBcbiAgICAgICAgPG1haW4+XG4gICAgICAgICAgPGZpbHRlci1iYXI+PC9maWx0ZXItYmFyPlxuICAgICAgICAgIDxyZXN0YXJ1YW50LWxpc3Q+PC9yZXN0YXJ1YW50LWxpc3Q+XG4gICAgICAgICAgPG1vZGFsLWJveCBtb2RhbC1pZD1cInJldGF1cmFudC1mb3JtLW1vZGFsXCI+XG4gICAgICAgICAgPHJlc3RhdXJhbnQtZm9ybT48L3Jlc3RhdXJhbnQtZm9ybT5cbiAgICAgICAgICA8L21vZGFsLWJveD5cbiAgICAgICAgPC9tYWluPlxuICAgICAgYDtcbiAgICB9XG59XG4iLCJpbXBvcnQgRXZlbnRDb21wb25lbnQgZnJvbSBcIi4uL2Fic3RyYWN0L0V2ZW50Q29tcG9uZW50XCI7XG5pbXBvcnQgeyAkIH0gZnJvbSBcIi4uL3V0aWxzL3NlbGVjdG9yXCI7XG5pbXBvcnQgeyBNT0RBTF9FVkVOVCwgTU9EQUxfRVZFTlRfQUNUSU9OIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9ldmVudFwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdGF1cmFudEhlYWRlciBleHRlbmRzIEV2ZW50Q29tcG9uZW50IHtcbiAgICBnZXRUZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICA8aGVhZGVyIGNsYXNzPVwiZ25iXCI+XG4gICAgICA8aDEgY2xhc3M9XCJnbmJfX3RpdGxlIHRleHQtdGl0bGVcIj7soJDsi6wg662QIOuoueyngDwvaDE+XG4gICAgICA8YnV0dG9uIGlkPVwiYWRkLWJ1dHRvblwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImduYl9fYnV0dG9uXCIgYXJpYS1sYWJlbD1cIuydjOyLneygkCDstpTqsIBcIj5cbiAgICAgICAgPGltZyBzcmM9XCIuL2FkZC1idXR0b24ucG5nXCIgYWx0PVwi7J2M7Iud7KCQIOy2lOqwgFwiPlxuICAgICAgPC9idXR0b24+XG4gICAgPC9oZWFkZXI+XG4gICAgYDtcbiAgICB9XG4gICAgc2V0RXZlbnQoKSB7XG4gICAgICAgICQoXCIjYWRkLWJ1dHRvblwiKT8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlQWRkQnV0dG9uQ2xpY2spO1xuICAgIH1cbiAgICBoYW5kbGVBZGRCdXR0b25DbGljaygpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChNT0RBTF9FVkVOVC5yZXN0YXVyYW50Rm9ybU1vZGFsQWN0aW9uLCB7XG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgZGV0YWlsOiB7IGFjdGlvbjogTU9EQUxfRVZFTlRfQUNUSU9OLm9wZW4gfSxcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cbiIsImltcG9ydCBFdmVudENvbXBvbmVudCBmcm9tIFwiLi4vLi4vYWJzdHJhY3QvRXZlbnRDb21wb25lbnRcIjtcbmltcG9ydCB7ICQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvc2VsZWN0b3JcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdCBleHRlbmRzIEV2ZW50Q29tcG9uZW50IHtcbiAgICBnZXRUZW1wbGF0ZSgpIHtcbiAgICAgICAgY29uc3QgcmF3T3B0aW9ucyA9IHRoaXMuZ2V0QXR0cmlidXRlKFwib3B0aW9uc1wiKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0SWQgPSB0aGlzLmdldEF0dHJpYnV0ZShcInNlbGVjdC1pZFwiKSB8fCBcIlwiO1xuICAgICAgICBjb25zdCBjbGFzc05hbWUgPSB0aGlzLmdldEF0dHJpYnV0ZShcImNsYXNzLW5hbWVcIikgfHwgXCJcIjtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSB8fCBcIlwiO1xuICAgICAgICBjb25zdCByZXF1aXJlZCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwicmVxdWlyZWRcIikgfHwgXCJcIjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHJhd09wdGlvbnMgPyBKU09OLnBhcnNlKHJhd09wdGlvbnMpIDogW107XG4gICAgICAgIHJldHVybiBgXG4gICAgICA8c2VsZWN0IGlkPSR7c2VsZWN0SWR9IGNsYXNzPSR7Y2xhc3NOYW1lfSBuYW1lPSR7bmFtZX0gJHtyZXF1aXJlZCA/IFwicmVxdWlyZWRcIiA6IFwiXCJ9PlxuICAgICAgICAke29wdGlvbnMubWFwKCh7IHZhbHVlLCBsYWJlbCB9KSA9PiBgPG9wdGlvbiB2YWx1ZT0ke3ZhbHVlfT4ke2xhYmVsfTwvb3B0aW9uPmApfVxuICAgICAgPC9zZWxlY3Q+XG4gICAgYDtcbiAgICB9XG4gICAgaGFuZGxlU2VsZWN0Q2hhbmdlKGUsIGV2ZW50TmFtZSkge1xuICAgICAgICBjb25zdCBzZWxlY3QgPSBlLnRhcmdldDtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZSA9IHNlbGVjdC52YWx1ZTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChldmVudE5hbWUsIHtcbiAgICAgICAgICAgIGRldGFpbDogeyB2YWx1ZTogc2VsZWN0ZWRWYWx1ZSB9LFxuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBzZXRFdmVudCgpIHtcbiAgICAgICAgY29uc3QgZXZlbnROYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJldmVudC1uYW1lXCIpIHx8IFwiXCI7XG4gICAgICAgIGNvbnN0IHNlbGVjdElkID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJzZWxlY3QtaWRcIikgfHwgXCJcIjtcbiAgICAgICAgJChgIyR7c2VsZWN0SWR9YCk/LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGUpID0+IHRoaXMuaGFuZGxlU2VsZWN0Q2hhbmdlKGUsIGV2ZW50TmFtZSkpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwib3B0aW9uc1wiLFxuICAgICAgICAgICAgXCJldmVudC1uYW1lXCIsXG4gICAgICAgICAgICBcInNlbGVjdC1pZFwiLFxuICAgICAgICAgICAgXCJjbGFzcy1uYW1lXCIsXG4gICAgICAgICAgICBcIm5hbWVcIixcbiAgICAgICAgICAgIFwicmVxdWlyZWRcIixcbiAgICAgICAgXTtcbiAgICB9XG59XG4iLCJpbXBvcnQgRXZlbnRDb21wb25lbnQgZnJvbSBcIi4uLy4uL2Fic3RyYWN0L0V2ZW50Q29tcG9uZW50XCI7XG5pbXBvcnQgeyAkIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3NlbGVjdG9yXCI7XG5pbXBvcnQgeyBNT0RBTF9FVkVOVCwgTU9EQUxfRVZFTlRfQUNUSU9OIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50cy9ldmVudFwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwgZXh0ZW5kcyBFdmVudENvbXBvbmVudCB7XG4gICAgZ2V0VGVtcGxhdGUoKSB7XG4gICAgICAgIGNvbnN0IGlzT3BlbiA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiaXNPcGVuXCIpO1xuICAgICAgICBjb25zdCBtb2RhbElkID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJtb2RhbC1pZFwiKTtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmlubmVySFRNTDtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgaWQ9JHttb2RhbElkfSBjbGFzcz1cIm1vZGFsICR7aXNPcGVuID8gXCJtb2RhbC0tb3BlblwiIDogXCJcIn1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJhY2tkcm9wXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250YWluZXJcIj5cbiAgICAgICAgICAke2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gICAgfVxuICAgIHNldEV2ZW50KCkge1xuICAgICAgICBjb25zdCBtb2RhbElkID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJtb2RhbC1pZFwiKSB8fCBcIlwiO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKE1PREFMX0VWRU5ULnJlc3RhdXJhbnRGb3JtTW9kYWxBY3Rpb24sIChlKSA9PiB0aGlzLmhhbmRsZUZvcm1Nb2RhbEFjdGlvbihlLCBtb2RhbElkKSk7XG4gICAgICAgICQoYCMke21vZGFsSWR9ID4gLm1vZGFsLWJhY2tkcm9wYCk/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwobW9kYWxJZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBoYW5kbGVGb3JtTW9kYWxBY3Rpb24oZSwgbW9kYWxJZCkge1xuICAgICAgICBjb25zdCB7IGFjdGlvbiB9ID0gZS5kZXRhaWw7XG4gICAgICAgIGlmIChhY3Rpb24gPT09IE1PREFMX0VWRU5UX0FDVElPTi5vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Nb2RhbChtb2RhbElkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uID09PSBNT0RBTF9FVkVOVF9BQ1RJT04uY2xvc2UpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VNb2RhbChtb2RhbElkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvcGVuTW9kYWwobW9kYWxJZCkge1xuICAgICAgICAkKGAjJHttb2RhbElkfWApPy5jbGFzc0xpc3QuYWRkKFwibW9kYWwtLW9wZW5cIik7XG4gICAgfVxuICAgIGNsb3NlTW9kYWwobW9kYWxJZCkge1xuICAgICAgICAkKGAjJHttb2RhbElkfWApPy5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWwtLW9wZW5cIik7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4gW1wiaXNPcGVuXCIsIFwibW9kYWwtaWRcIl07XG4gICAgfVxufVxuIiwiaW1wb3J0IFwiLi4vdGVtcGxhdGVzL3N0eWxlLmNzc1wiO1xuaW1wb3J0IEx1bmNoQXBwIGZyb20gXCIuL0x1bmNoQXBwXCI7XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJsdW5jaC1hcHBcIiwgTHVuY2hBcHApO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwibmMiLCJCYXNlQ29tcG9uZW50IiwiSFRNTEVsZW1lbnQiLCJjb25uZWN0ZWRDYWxsYmFjayIsInJlbmRlciIsImlubmVySFRNTCIsImdldFRlbXBsYXRlIiwiRXZlbnRDb21wb25lbnQiLCJzZXRFdmVudCIsIiQiLCJzZWxlY3RvciIsIkZJTFRFUl9FVkVOVCIsIk1PREFMX0VWRU5UIiwiTU9EQUxfRVZFTlRfQUNUSU9OIiwiUkVTVEFVUkFOVF9FVkVOVCIsIkNBVEVHT1JZX1RPX0lNQUdFX1BBVEgiLCJrb3JlYW4iLCJjaGluZXNlIiwiamFwYW5lc2UiLCJ3ZXN0ZXJuIiwiYXNpYW4iLCJldGMiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImNhdGVnb3J5IiwiZ2V0QXR0cmlidXRlIiwiaXNDYXRlZ29yeSIsImNvbnZlcnRDYXRlZ29yeVRvSW1hZ2UiLCJrZXlzIiwiaW5jbHVkZXMiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJmaWx0ZXJMaXRlcmFsT2JqZWN0IiwiZW50cmllcyIsInZhbHVlIiwibGFiZWwiLCJDQVRFR09SWSIsIktPUkVBTl9DQVRFR09SWSIsIlJFU1RBVVJBTlRfRElTUExBWUlOR19GSUxURVIiLCJhbGwiLCJLT1JFQU5fUkVTVEFVUkFOVF9ESVNQTEFZSU5HX0ZJTFRFUiIsIlNPUlRfRklMVEVSIiwiS09SRUFOX1NPUlRfRklMVEVSIiwidmFsaWRhdGVJblJhbmdlIiwibWluIiwibWF4IiwidmFsaWRhdGVOdW1iZXJCZWxvdyIsIl9SZXN0YXVyYW50X2luc3RhbmNlcyIsIl9SZXN0YXVyYW50X25hbWUiLCJfUmVzdGF1cmFudF90aW1lVG9SZWFjaCIsIl9SZXN0YXVyYW50X2Rlc2NyaXB0aW9uIiwiX1Jlc3RhdXJhbnRfY2F0ZWdvcnkiLCJfUmVzdGF1cmFudF9saW5rIiwiX1Jlc3RhdXJhbnRfdmFsaWRhdGVQcm9wcyIsIl9SZXN0YXVyYW50X3ZhbGlkYXRlTmFtZSIsIl9SZXN0YXVyYW50X3ZhbGlkYXRlQ2F0ZWdvcnkiLCJfUmVzdGF1cmFudF92YWxpZGF0ZVRpbWVUb1JlYWNoIiwiX1Jlc3RhdXJhbnRfdmFsaWRhdGVEZXNjcmlwdGlvbiIsIl9SZXN0YXVyYW50X3ZhbGlkYXRlTGluayIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJyZWNlaXZlciIsInN0YXRlIiwia2luZCIsImYiLCJUeXBlRXJyb3IiLCJoYXMiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0Iiwic2V0IiwiV2Vha01hcCIsIldlYWtTZXQiLCJuYW1lIiwidGltZVRvUmVhY2giLCJkZXNjcmlwdGlvbiIsImxpbmsiLCJjb25zdHJ1Y3RvciIsImFkZCIsImdldE5hbWUiLCJnZXRJbmZvIiwiX1Jlc3RhdXJhbnRzX2luc3RhbmNlcyIsIl9SZXN0YXVyYW50c19yZXN0YXVyYW50cyIsIl9SZXN0YXVyYW50c192YWxpZGF0ZVVuaXF1ZU5hbWUiLCJyZXN0YXVyYW50cyIsIm5hbWVzIiwicmVzdGF1cmFudCIsIlNldCIsInNpemUiLCJnZXREZXRhaWxzIiwiZ2V0UGFyc2VkSXRlbSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZSIsInNldEl0ZW0iLCJyZXNldCIsImNsZWFyIiwicmVzdGF1cmFudFN0b3JlIiwiZ2V0UmVzdGF1cmFudHMiLCJyZXN0YXVyYW50SW5mb3MiLCJyZXN0YXVyYW50c0FycmF5IiwiYWxlcnQiLCJzZXRSZXN0YXVybmF0cyIsImdlbmVyYXRlQ2F0ZWdvcnlPcHRpb25zIiwiZ2VuZXJhdGVTb3J0aW5nT3B0aW9ucyIsImdlbmVyYXRlT3B0aW9ucyIsImZpaWx0ZXJlZE9wdGlvbnMiLCJsYWJlbEZvciIsInRpdGxlIiwicmVxdWlyZWQiLCJoZWxwVGV4dCIsImRpc3RhbmNlT3B0aW9ucyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVBZGRCdXR0b25DbGljayIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJhY3Rpb24iLCJjYXRlZ29yeUZpbHRlciIsInNvcnRGaWx0ZXIiLCJzdXBlciIsImZpbHRlcmVkUmVzdGF1cmFudEluZm9zIiwiZmlsdGVyQnlDYXRlZ29yeSIsInNvcnQiLCJoYW5kbGVDYXRlZ29yeUZpbHRlckNoYW5nZSIsImhhbmRsZVNvcnRGaWx0ZXJDaGFuZ2UiLCJoYW5kbGVSZXN0YXVyYW50Rm9ybVN1Ym1pdCIsImV2ZW50IiwicGF5bG9hZCIsImNsZWFuVXAiLCJlcnJvciIsIm1lc3NhZ2UiLCJmaWx0ZXIiLCJiIiwibG9jYWxlQ29tcGFyZSIsInJhd09wdGlvbnMiLCJoYW5kbGVTZWxlY3RDaGFuZ2UiLCJldmVudE5hbWUiLCJzZWxlY3RlZFZhbHVlIiwic2VsZWN0SWQiLCJpc09wZW4iLCJtb2RhbElkIiwiaGFuZGxlRm9ybU1vZGFsQWN0aW9uIiwiY2xvc2VNb2RhbCIsIm9wZW5Nb2RhbCIsImNsYXNzTGlzdCIsImhhbmRsZVN1Ym1pdCIsImhhbmRsZUNsb3NlQnV0dG9uQ2xpY2siLCJwcmV2ZW50RGVmYXVsdCIsImZvcm0iLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiZnJvbUVudHJpZXMiLCJOdW1iZXIiLCJmaWx0ZXJlZE9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9